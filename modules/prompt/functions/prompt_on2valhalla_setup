#
# An amalgamation of various others prompt setups
# Origins of borrowed code are notated (-NAME) in the comments
# Although borrowings are heavily modified at times
#
# Authors:
#   Jason Mann <on2valhalla@gmail.com>
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
#
# Load dependencies.
pmodload 'helper'

# CURRENT_BG='NONE'
# SEGMENT_SEPARATOR='⮀'




############################################################
#                     Utilities                            #
############################################################
# Calculate the elapsed time from seconds -paradox
function calc_elapsed_time {
  local mid=""

  if [[ $_prompt_on2valhalla_timer -ge 3600 ]]; then
    let "timer_hours = $_prompt_on2valhalla_timer / 3600"
    let "remainder = $_prompt_on2valhalla_timer % 3600"
    let "timer_minutes = $remainder / 60"
    let "timer_seconds = $remainder % 60"
    mid="elapsed time: ${timer_hours}h ${timer_minutes}m ${timer_seconds}s"
  elif [[ $_prompt_on2valhalla_timer -ge 60 ]]; then
    let "timer_minutes = $_prompt_on2valhalla_timer / 60"
    let "timer_seconds = $_prompt_on2valhalla_timer % 60"
    mid="elapsed time: ${timer_minutes}m ${timer_seconds}s"
  else
    mid="elapsed time: ${_prompt_on2valhalla_timer}s"
  fi

  # Set RPATH to the elapsed time
  prompt_on2valhalla_set_rprompt $FP[b]$FP[red]${mid}$FP[nb]$FP[n]
}

# Check for features and set the prompt to the arguments sent
function prompt_on2valhalla_set_rprompt {
  if [ $#git_info -gt 0 ]; then
    RPROMPT="${git_info[status]}${git_info[prompt]} $@"
  else
    RPROMPT=$@
  fi
}


############################################################
#                     HOOKS                                #
############################################################
# Makes more sense to only update PWD when we change dirs
# Make PWD single letter dirs except last -sorin
CITC_ROOT=/google/src/cloud
SRCFS_HEAD_ROOT=/google/src/head/depot
function prompt_on2valhalla_pwd {
  local prompt_dir="$PWD"
  local home='~/'

  case $prompt_dir in
    $HOME) _prompt_on2valhalla_pwd=$FP[pink]'~'$FP[n];;
    $HOME/*/*)
      _prompt_on2valhalla_pwd=$FP[pink]'~/'$FP[blue]${${${(@j:/:M)${(@s:/:)prompt_dir##$HOME\/}##.#?}:h}%\.}/${prompt_dir:t};;
    $HOME/*)
      _prompt_on2valhalla_pwd=$FP[pink]'~/'$FP[blue]${${${(@j:/:M)${(@s:/:)prompt_dir##$HOME\/}##.#?}:h}%\.}${prompt_dir:t};;
    $CITC_ROOT/${USER})
      _prompt_on2valhalla_pwd=$FP[pink]'citc~';;
    $CITC_ROOT/${USER}/*)
      without_citc=${prompt_dir##${CITC_ROOT}/${USER}/};
      local client=${without_citc%%\/*};
      local r_dir=${${without_citc##$client(\/|)}/google3/g3};
      _prompt_on2valhalla_pwd=$FP[pink]$client':'$FP[blue]$r_dir$FP[n];;
    $CITC_ROOT/*/*)
      without_citc=${prompt_dir##$CITC_ROOT/};
      local user=${without_citc%%/*};
      local client=${${without_citc#*/}%/*};
      local r_dir=${without_citc#$user/$client};
      r_dir=${r_dir#/};
      r_dir=${r_dir/google3/g3}
      _prompt_on2valhalla_pwd=$FP[orange]$user':'$FP[pink]$client':'$FP[blue]$r_dir$FP[n];;
    *)
      _prompt_on2valhalla_pwd="${${${(@j:/:M)${(@s:/:)prompt_dir}##.#?}:h}%/}/${prompt_dir:t}" ;;
  esac
}

# For more sane git checks:
# Will not slow down the command prompt, but instead
# check on git every $PERIOD seconds
PERIOD=1
function prompt_on2valhalla_periodic {
  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi
  _prompt_on2valhalla_timer=$(($SECONDS - $_prompt_on2valhalla_start_time))
}

# Executes before every command
function prompt_on2valhalla_preexec {
  _prompt_on2valhalla_start_time=$SECONDS
  _prompt_on2valhalla_timer_running=true
}


# Executes before each prompt
function prompt_on2valhalla_precmd {
  prompt_on2valhalla_set_rprompt '[%D{%H:%M:%S}]'

  if [[ "$_prompt_on2valhalla_timer_print" = true ]]; then
    # Reset the rprompt if the timer changed it
    # Call periodic to set the git info just in case
    _prompt_on2valhalla_timer_print=false
  fi

  # Get timer result
  if [[ "$_prompt_on2valhalla_timer_running" = true ]]; then
    _prompt_on2valhalla_timer=$(($SECONDS-$_prompt_on2valhalla_start_time))
    if [[ $_prompt_on2valhalla_timer -gt 10 ]]; then
      calc_elapsed_time
      _prompt_on2valhalla_timer_print=true
    fi
  fi

  # Reset Timer because no command was run for longer than 10 secs
  _prompt_on2valhalla_timer_running=false
}


# Main prompt setup
function prompt_on2valhalla_setup {
  _prompt_on2valhalla_start_time=$SECONDS
  _prompt_on2valhalla_timer=0
  setopt LOCAL_OPTIONS
  setopt ZLE
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hooks: Docs say these should
  # load automatically with prompt, but they do not
  add-zsh-hook chpwd prompt_on2valhalla_pwd
  add-zsh-hook periodic prompt_on2valhalla_periodic
  add-zsh-hook preexec prompt_on2valhalla_preexec
  add-zsh-hook precmd prompt_on2valhalla_precmd

  # Customizable parameters. -nicoulaj
  local max_path_chars=30
  local color_path="$FP[blue]"
  local color_left="$FP[dk_orange]"
  local color_right="$FP[orange]"
  local user_lead="${1:-${color_left}❯$FP[n]}${1:-${color_right}❯$FP[n]}"
  local ruser_lead="${2:-${color_right}❮$FP[n]${color_left}❮$FP[n]}"
  local root_lead="${user_lead}${user_lead}"
  local rroot_lead="${ruser_lead}${ruser_lead}"

  # Set editor-info parameters. -sorin
  # switches direction of standard character for alternate mode
  # you can override this by passing to the theme
  # This also checks for privileges and doubles the character if so
  zstyle ':prezto:module:editor:info:completing' format "$FP[b]$FP[red]...$FP[n]$FP[nb]"
  zstyle ':prezto:module:editor:info:keymap:primary' format "%(!;${root_lead};${user_lead})"
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format "$FP[b]$FP[red]♺$FP[n]$FP[nb]"
  zstyle ':prezto:module:editor:info:keymap:alternate' format "%(!;${rroot_lead};${ruser_lead})"

  # Git
  zstyle ':prezto:module:git:info:action' format "! %s "
  zstyle ':prezto:module:git:info:ahead' format "$FP[dk_green]⬆$FP[n] "
  zstyle ':prezto:module:git:info:behind' format "$FP[red]⬇$FP[n] "
  zstyle ':prezto:module:git:info:branch' format "$FP[brown]%b$FP[n]"
  zstyle ':prezto:module:git:info:commit' format "$FP[grey]⭠ %.7c$FP[n]"
  zstyle ':prezto:module:git:info:position' format "%p "
  zstyle ':prezto:module:git:info:stashed' format "$FP[dk_yellow]↧%S$FP[n] "
  # Concise
  zstyle ':prezto:module:git:info:clean' format "$FP[40]✓$FP[n] "
  # Verbose Contexts
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:added' format "$FP[purple]✚$FP[n] "
  zstyle ':prezto:module:git:info:deleted' format "$FP[burgundy]✖$FP[n] "
  zstyle ':prezto:module:git:info:modified' format "$FP[yellow]∴$FP[n] "
  zstyle ':prezto:module:git:info:renamed' format "$FP[dk_orange]↪$FP[n] "
  zstyle ':prezto:module:git:info:unmerged' format "$FP[lt_red]⭃$FP[n] "
  zstyle ':prezto:module:git:info:untracked' format "$FP[magenta]∉$FP[n] "

  zstyle ':prezto:module:git:info:keys' format \
    'prompt' "%b%c" \
    'status' "%C%A%B%S%m%a%d%r%U%u"

  # Define prompts.
  # USERHOST='%n%{%B%F{red}%}@%M%{%b%f%}'
  # PWD=/Users/on2valhalla
  setopt EXTENDED_GLOB
  prompt_on2valhalla_pwd
  PROMPT="%(0?;;$FP[red]✘$FP[n] )%(!;$FP[yellow]⚡$FP[n]  ;)%(1j;$FP[cyan]%j⚙$FP[n] ;)$FP[blue]"'$_prompt_on2valhalla_pwd'"$FP[n] "'$editor_info[keymap]'"$FP[n] "
  prompt_on2valhalla_set_rprompt '[%*]'
  SPROMPT='zsh: correct $FP[red]%R$FP[n] to $FP[magenta]%r$FP[n] [nyae]? '
  # print "$PROMPT\n$RPROMPT"
}

# Usage: prompt_on2valhalla_setup [line ending character]
prompt_on2valhalla_setup "$@"


# Git module symbols
# Main Contexts
# Name  Format    Code Description
# %s    action    Special action name
# %A    ahead     Commits ahead of remote count
# %B    behind    Commits behind of remote count
# %b    branch    Branch name
# %c    commit    Commit hash
# %p    position  Commits from the nearest tag count
# %R    remote    Remote name
# %S    stashed   Stashed states count

# Concise Contexts
# Name  Format Code Description
# %C  clean  Clean state
# %D  dirty  Dirty files count
# %i  indexed  Indexed files count
# %I  unindexed  Unindexed files count
# %u  untracked  Untracked files count

#   Verbose Contexts
# Name  Format    Code Description
# %a    added     Added files count
# %C    clean     Clean state
# %d    deleted   Deleted files count
# %D    dirty     Dirty files count
# %m    modified  Modified files count
# %r    renamed   Renamed files count
# %U    unmerged  Unmerged files count
# %u    untracked Untracked files count
