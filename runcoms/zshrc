#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Prevent cases where byobu sets TERM, or where default options dont show colors
if [[ "$TERM" = "screen" ]]; then
  export TERM=screen-256color
elif [[ "$TERM" = "xterm" ]]; then
  export TERM=xterm-256color
fi

# Detect secure shell
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] || [ -n "$SSH_CONNECTION" ]; then
  SESSION_TYPE=local
else
  case $(ps -o comm= -p $PPID) in
    sshd|*/sshd) SESSION_TYPE=remote/ssh;;
  esac
fi

##############################################################################
# Automated Prompts
##############################################################################
SCHEDPROMPT=1
schedprompt() {
  emulate -L zsh
  zmodload -i zsh/sched

  # Remove existing event, so that multiple calls to
  # "schedprompt" work OK.  (You could put one in precmd to push
  # the timer 30 seconds into the future, for example.)
  integer i=${${(@)zsh_scheduled_events#*:*:}[(I)schedprompt]}
  (( i )) && sched -$i

  # if [[ $_prompt_on2valhalla_timer -gt 900 ]]; then
  #   cmatrix
  # fi

  # Test that zle is running before calling the widget (recommended
  # to avoid error messages).
  # Otherwise it updates on entry to zle, so there's no loss.
  zle && zle reset-prompt

  sleep .1
  # This ensures we're not too far off the start of the minute
  if [[ $SCHEDPROMPT -eq 1 ]]
    then
    sched +1 schedprompt
  fi
}
schedprompt



##############################################################################
# Some ZSH options
##############################################################################
autoload -U url-quote-magic
zle -N self-insert url-quote-magic

# Fix for ubuntu skip word movement probably need to remove this for Mac, or
# flag guard it at least
bindkey ';5D' emacs-backward-word
bindkey ';5C' emacs-forward-word

#Blaze Zsh Completion
#cache-path must exist
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

# Source Google specific stuff.
if [[ -s "${HOME}/.googlerc" ]]; then
  source "${HOME}/.googlerc"
fi

##############################################################################
# Personal Stuff
##############################################################################
alias reload="exec zsh --login"
alias zshrc="$EDITOR ~/.zshrc && reload"
alias rc="zshrc"
alias googlerc="$EDITOR ~/.googlerc && reload"

run() {
  if [[ $# -lt 2 ]]; then
    echo "Usage: run [num_times] [command]"
    return 1
  fi
  number=$1
  shift
  for i in $(seq $number); do
    $@
  done
}

mailme() {
  echo $1 | mailx jmann@google.com;
}

txtme() {
  curl --silent --output /dev/null http://textbelt.com/text -d number=6463925870 -d "message=$1" && echo "message sent"
}

wait-pid() {
  while [[ ( -d /proc/$pid ) ]]; do sleep .5; done;
}

add-notify() {
  pid=$1;
  if [[ ! ( -d /proc/$pid ) ]] ; then echo "job $pid not found" ; return 1 ; fi
  name=$(ps -p $pid -o comm=);
  wait-pid ${pid}
  txtme "job: $name finished";
}

# Use Sublime Text as the default editor.
# if [[ "$SESSION_TYPE" = "remote/ssh" ]]; then
export EDITOR=vim
# else
# 	export EDITOR="subl -w"
# fi

# And your own personal scripts.
if [[ ! "$PATH" == *"${HOME}/bin"* ]]; then
  export PATH=$HOME/bin:$PATH
fi

# Add binaries installed via Homebrew to our PATH (OSX ONLY).
if [[ "$OSTYPE" == "darwin"* ]]; then
  export PATH=$HOME/homebrew/bin:$PATH
fi

# Needed for moving words with control-left/right in byobu
bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word


find-grep() {
  local dir text
  dir=$1
  text=$2
  find $dir -xdev -type f -print0 | xargs -0 grep --color=always -H "$text" | less -R
}
alias fgr=find-grep

yellow-print() {
  text=$@
  yellow='\033[0;33m'
  no_color='\033[0m' # No Color
  printf "$yellow$text$no_color\n"
}

# wrapper for command line calc
solve() {
  calc="${@//p/+}"
  calc="${calc//m/-}"
  calc="${calc//d//}"
  calc="${calc//x/*}"
  echo $calc
  bc -l <<< "scale=10;$calc"
}
alias c=solve

# random-lines N FILE
# chooses N random lines from FILE
random-lines() {
  sort -R $2 | head -n $1
}

reset-path() {
  PATH=/usr/local/bin:/usr/bin:/bin:/usr/lib/google-golang/bin:/usr/local/buildtools/java/jdk/bin:/usr/local/sbin:/usr/sbin:/sbin
  reload
}

##############################################################################
export GOPATH=/usr/local/google/home/jmann/gocode
